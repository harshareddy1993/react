{"version":3,"sources":["TableHeader.js","TableBody.js","Table.js","Form.js","Api.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","Component","TableBody","_this$props","this","props","inflowMetrics","removeMetrics","rows","map","data","index","key","product","inflow","onClick","Table","className","src_TableHeader","src_TableBody","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","handleSubmit","e","preventDefault","addMetrics","state","initialState","_this$state","inputStyle","paddingLeft","onSubmit","style","type","onChange","Api","provider_url","keyword","initiateSearch","fetch","then","response","json","console","log","list_items","item","updateKeyword","paddingTop","App","filter","i","metric","concat","toConsumableArray","src_Table","src_Form","src_Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5793133b.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass TableHeader extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<thead>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td>Product</td>\r\n\t\t\t\t\t<td>Inflow</td>\r\n\t\t\t\t\t<td>&nbsp;</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TableHeader;","import React,{Component} from 'react';\r\n\r\nclass TableBody extends  Component {\r\n\trender() {\r\n\t\tconst {inflowMetrics,removeMetrics} = this.props;\r\n\r\n\t\tconst rows = inflowMetrics.map((data,index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t<td>{data.product}</td>\r\n\t\t\t\t\t<td>{data.inflow}</td>\r\n\t\t\t\t\t<td><button onClick={() => removeMetrics(index)}>X</button></td>\r\n\t\t\t\t</tr>\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<tbody>\r\n\t\t\t\t{rows}\r\n\t\t\t</tbody>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TableBody;","import React, {Component} from 'react';\r\nimport TableHeader from './TableHeader';\r\nimport TableBody from './TableBody';\r\n\r\nclass Table extends Component {\r\n\trender() {\r\n\t\tconst {inflowMetrics, removeMetrics} = this.props;\r\n\t\treturn(\r\n\t\t\t\t<table className=\"table\">\r\n\t\t\t\t\t<TableHeader />\r\n\t\t\t\t\t<TableBody inflowMetrics={inflowMetrics} removeMetrics={removeMetrics}/>\r\n\t\t\t\t</table>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Table;","import React,{Component} from 'react';\r\n\r\nclass Form extends Component {\r\n\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.initialState = {\r\n\t\t\tproduct:'',\r\n\t\t\tinflow:''\r\n\t\t};\r\n\r\n\t\tthis.state = this.initialState;\r\n\t}\r\n\r\n\r\n\thandleChange = event => {\r\n\t\tconst {name,value} = event.target;\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t}\r\n\r\n\thandleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\t// console.log(this.state);\r\n\t\tthis.props.addMetrics(this.state);\r\n\t\tthis.setState(this.initialState);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {product,inflow} = this.state;\r\n\t\tconst inputStyle = {\r\n\t\t\tpaddingLeft: '40px'\r\n\t\t}\r\n\t\treturn(\r\n\t\t\t<form onSubmit={this.handleSubmit} className=\"form form-horizontal\">\r\n\t\t\t\t<label style={inputStyle}>Product</label>\r\n\t\t\t\t<input type='text' name='product' value={product} onChange={this.handleChange}/>\r\n\t\t\t\t&nbsp;&nbsp;&nbsp;\r\n\t\t\t\t<label style={inputStyle}>Inflow</label>\r\n\t\t\t\t<input type='text' name='inflow' value={inflow} onChange={this.handleChange}/>\r\n\t\t\t\t<button>+</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n\r\n}\r\n\r\nexport default Form;\r\n","import React,{Component} from 'react';\r\n\r\nclass Api extends Component {\r\n  state = {\r\n    provider_url : \"https://en.wikipedia.org/w/api.php?action=opensearch&format=json&origin=*&search=\",\r\n    keyword: ''\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n    // var list_items = '';\r\n  // }\r\n\r\n\r\n  initiateSearch = () => {\r\n    const {provider_url,keyword} = this.state;\r\n    if (keyword !== '') {\r\n    const completeURL = provider_url+keyword;\r\n    // console.log(completeURL);\r\n    fetch(completeURL).then(\r\n      response => response.json()\r\n    ).then(\r\n      response => {\r\n        console.log(\"Populating results\");\r\n        this.list_items = response.map((item,index) => {\r\n          return <li key={index}>{item}</li>;\r\n        });\r\n        this.setState({\r\n          keyword: this.state.keyword\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  updateKeyword = e => {\r\n    this.setState({\r\n      keyword: e.target.value\r\n    });\r\n  }\r\n\r\n  render () {\r\n    const containerStyling = {\r\n      paddingTop: '50px'\r\n    };\r\n    return(\r\n      <div className=\"container text-center\" style={containerStyling}>\r\n        <input type=\"text\" name=\"keyword\" value={this.state.keyword} onChange={this.updateKeyword}/>\r\n        <button onClick={this.initiateSearch}>Search Wiki</button>\r\n        <br/>\r\n        <br/>\r\n        <ul>\r\n          {this.list_items}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Api;\r\n","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\nimport Api from './Api';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    inflowMetrics: [\r\n      {\r\n        'product': 'SDP',\r\n        'inflow': 4\r\n      },\r\n      {\r\n        'product': 'CCN',\r\n        'inflow': 2\r\n      },\r\n      {\r\n        'product': 'OCC',\r\n        'inflow': 2\r\n      },\r\n      {\r\n        'product': 'LUVA',\r\n        'inflow': 1\r\n      },\r\n      {\r\n        'product': 'MM',\r\n        'inflow': 5\r\n      }\r\n    ]\r\n  };\r\n\r\n  removeMetrics = (index) => {\r\n    const {inflowMetrics} = this.state;\r\n\r\n    this.setState({\r\n      inflowMetrics: inflowMetrics.filter((data,i) => {\r\n        return i !== index;\r\n      })\r\n    });\r\n  };\r\n\r\n  handleSubmit = (metric) => {\r\n    this.setState({\r\n      inflowMetrics: [...this.state.inflowMetrics,metric]\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"container\">\r\n        <Table inflowMetrics={this.state.inflowMetrics} removeMetrics={this.removeMetrics} />\r\n        <Form addMetrics={this.handleSubmit}/>\r\n        <Api />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}